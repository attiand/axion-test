plugins {
    id 'base'
    id 'pl.allegro.tech.build.axion-release' version '1.13.14'
}

import se.uhr.nya.db.DatabaseVersion

scmVersion {
    branchVersionCreator = [
        'rel_.*': 'simple',
        'patch_.*': 'simple',
        '.*': 'versionWithBranch'
    ]
    useHighestVersion = true
    ignoreUncommittedChanges = false
    tag {
        prefix = ''
    }

    hooks {
        post { context ->
            getBuildDir().mkdirs()
            new File(getBuildDir(), 'upgrade.txt').text = databaseVersions(context.previousVersion, context.currentVersion)
        }
    }
}


String databaseVersions(def previousVersion, def releaseVersion) {
    DatabaseVersion db = new DatabaseVersion(file('.'))

    def versions = db.versions(previousVersion, releaseVersion).unique()

    if(versions.size() == 1) {
        logger.debug('upgrade to version: {}', versions.first())
        return versions.first()
    }
    else if(versions.size() > 1) {
        logger.error('no distinct version: {}', versions)
        return ''
    }
    else {
        return ''
    }
}

tasks.register('verifyUpgrade') {
    doLast {

println "----------- ${scmVersion.previousVersion}"

        String dbVersion = databaseVersions(scmVersion.previousVersion, 'HEAD')
        logger.info("-------------------------" + dbVersion)
    }
}