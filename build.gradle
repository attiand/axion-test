plugins {
    id 'base'
    id 'pl.allegro.tech.build.axion-release' version '1.13.14'
}

import org.eclipse.jgit.api.Git
import org.eclipse.jgit.treewalk.CanonicalTreeParser
import org.eclipse.jgit.lib.*

scmVersion {
    branchVersionCreator = [
        'rel_.*': 'simple',
        'patch_.*': 'simple',
        '.*': 'versionWithBranch'
    ]
    useHighestVersion = true
    ignoreUncommittedChanges = false
    tag {
        prefix = ''
    }

    hooks {
        pre {context -> databaseUpgrade(context.previousVersion, context.currentVersion)}
    }
}


String databaseUpgrade(def previousVersion, def releaseVersion) {
    Git git = Git.open(file('.'))
    Repository repository = git.getRepository()
    
    ObjectId p = repository.resolve(previousVersion)
    ObjectId c = repository.resolve(releaseVersion)

    ObjectReader reader = repository.newObjectReader();
    CanonicalTreeParser pTreeIter = new CanonicalTreeParser();
    oldTreeIter.reset(reader, p);
    CanonicalTreeParser cTreeIter = new CanonicalTreeParser();
    newTreeIter.reset(reader, c);

    def diffs = git.diff()
            .setNewTree(cTreeIter)
            .setOldTree(pTreeIter)
            .call();


    diffs.each { d ->
        println "Entry: " + entry.getChangeType() + ":" + entry.getNewPath()
    }

    println "----- ${previousVersion} ${releaseVersion}"
}