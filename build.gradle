plugins {
    id 'base'
    id 'pl.allegro.tech.build.axion-release' version '1.13.14'
}

import se.uhr.nya.db.DatabaseModel

scmVersion {
    branchVersionCreator = [
        'rel_.*': 'simple',
        'patch_.*': 'simple',
        '.*': 'versionWithBranch'
    ]
    useHighestVersion = true
    ignoreUncommittedChanges = false
    tag {
        prefix = ''
    }

    hooks {
        post { context ->
            getBuildDir().mkdirs()
            new File(getBuildDir(), 'upgrade.txt').text = databaseMigrations(context.previousVersion, context.currentVersion)
        }
    }
}


String databaseMigrations(def previousVersion, def releaseVersion) {
    DatabaseModel model = new DatabaseModel(file('.'))

    def migrations = model.migrations(previousVersion, releaseVersion).unique()

    if(migrations.size() == 1) {
        logger.debug('upgrade to version: {}', migrations.first())
        return migrations.first()
    }
    else if(migrations.size() > 1) {
        logger.error('no distinct version: {}', migrations)
        return migrations
    }
    else {
        return '-'
    }
}

tasks.register('verifyUpgrade') {
    doLast {
        DatabaseModel model = new DatabaseModel(file('.'))
        def newVersion = project.findProperty('verifyNewVersion')

        def migrations = (newVersion ? model.migrations(scmVersion.previousVersion, newVersion) : model.migrations(scmVersion.previousVersion))

        def deliveryNumber = migrations.collect { m ->
            m.split(/\./).dropRight(1).join('.')
        }.toUnique().size()

        if(deliveryNumber > 1) {
            throw new GradleException("There are more than one delivery version upgrade between ${scmVersion.previousVersion} and ${newVersion ?: 'workspace'}: ${migrations.toUnique()}")
        }
    }
}
